<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title></title>
    <url>%2F2017%2F12%2F21%2Falgorithm_memo.html</url>
    <content type="text"><![CDATA[1234digraph G&#123; 1 -- 2 2 -- 3&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[VS code Record]]></title>
    <url>%2F2017%2F12%2F01%2FVS-code-Record.html</url>
    <content type="text"><![CDATA[Situation Write down something after reading, coding and thinking. Target .md format, pure text. Shortcuts for main editing oprations. Frequently Updating to meet the developing world. Flow chart supported. Visible logic map, easy navigating content. Extensions Markdown All in One: Ctrl b: Toggle bold Ctrl i: Tggle italic Ctrl Shift ]: Uplevel Ctrl Shift [: Downlevel ToC: Table of Content Tab&amp;Backspace: For indent&amp;unindent Alt c: Check box Table formatter Outline View Markdown Preview Enhanced: Flow chart 12345678st=&gt;start: Start Nameop=&gt;operation: Operation Namecond=&gt;condition: Condition Namee=&gt;endst-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op Sequence 123456789Title: Here is a titleA-&gt;B: Normal lineB--&gt;C: Dashed lineC-&gt;&gt;D: Open arrowD--&gt;&gt;A: Dashed open arrowNote left of A: Note to the\n left of ANote right of A: Note to the\n right of ANote over A: Note over ANote over A,B: Note over both A and B Gantt 1234567891011121314gantt title 项目开发流程 section 项目确定 需求分析 :a1, 2016-06-22, 3d 可行性报告 :after a1, 5d 概念验证 : 5d section 项目实施 概要设计 :2016-07-05 , 5d 详细设计 :2016-07-08, 10d 编码 :2016-07-15, 10d 测试 :2016-07-22, 5d section 发布验收 发布: 2d 验收: 3dmaid More flowchart 1234567891011121314151617st=&gt;start: Start|past:&gt;http://www.google.com[blank]e=&gt;end: End:&gt;http://www.google.comop1=&gt;operation: My Operation|pastop2=&gt;operation: Stuff|currentsub1=&gt;subroutine: My Subroutine|invalidcond=&gt;condition: Yesor No?|approved:&gt;http://www.google.comc2=&gt;condition: Good idea|rejectedio=&gt;inputoutput: catch something...|requestst-&gt;op1(right)-&gt;condcond(yes, right)-&gt;c2cond(no)-&gt;sub1(left)-&gt;op1 c2(yes)-&gt;io-&gt;ec2(no)-&gt;op2-&gt;est@&gt;op1(&#123;&quot;stroke&quot;:&quot;Red&quot;&#125;)@&gt;cond(&#123;&quot;stroke&quot;:&quot;Red&quot;,&quot;stroke-width&quot;:6,&quot;arrow-end&quot;:&quot;classic-wide-long&quot;&#125;)@&gt;c2(&#123;&quot;stroke&quot;:&quot;Red&quot;&#125;)@&gt;op2(&#123;&quot;stroke&quot;:&quot;Red&quot;&#125;)@&gt;e(&#123;&quot;stroke&quot;:&quot;Red&quot;&#125;) Read more mermaidjs flowjs]]></content>
      <tags>
        <tag>VS Code</tag>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Vim 常用快捷键]]></title>
    <url>%2F2017%2F11%2F30%2FVim-%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE.html</url>
    <content type="text"><![CDATA[Situation(情景)： 无法将服务器中的文件下载至熟悉的GUI的IDE或者编辑器进行修改的情况下，由于vim在各大Linux发行版上的通用性，只能使用vim。 Task（任务）： 熟悉常用操作，节省时间。 多嘴两句： 不求精通Vim！ 通用的IDE在整个项目上提供的各种特性不仅对每个人来说通用规整，而且方便。 不求添加各种插件改造！ 热爱Vim的人们开发了适合自己的各种插件使其满足在编程时的各种需求。 Vim的效率和IDE相比我不知道，因为不了解最高水平。但是IDE由一个盈利的团队在开发，大量的人在使用测试，驱动力、与时俱进、通用性的能力是当年命令行下这款Geek所使用的软件所不具备的。 所以，对我来说，没有明确产出，把如何配置生产环境交给更专业的人，比如专门研发IDE的那群人。 本文只针对常用的操作,进阶请自行搜索相关书籍.(对,这个编辑器的使用是可以写成书的) Action（行动）： 模式 刚启动时的Normal模式：每个键位对应操作 例：h,j,k,l: 代表将光标向左、下、上、右移动一次。 /: 搜索,后面跟搜索内容,n:next,跳转到搜索的下一个 G: 跳转当最后一行 x: 删除当前字符 dd: 删除本行 p: 粘贴 v: 进入选中状态,可以配合上下左右进行选中文字,然后再x删除等操作. :wq: 保存并退出 :q!: 不保存强制退出 从Normal到Insert模式 a:行尾追加 i:当前光标插入 o:在下一行进行编辑 O:在上一行进行编辑 通过上述操作进入到Insert模式，每个键位对应字母 通过ESC键, 从Insert模式到Normal模式 Result(结果): 主要曾经折腾过各种插件,这个编辑器对于C语言写个小程序算法题什么的还可以,大型项目的各种自带的功能,你看看IDE中的那些,这个编辑器真的能更好的实现嘛?]]></content>
      <tags>
        <tag>editor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[程序员健康备忘]]></title>
    <url>%2F2017%2F11%2F30%2F%E7%A8%8B%E5%BA%8F%E5%91%98%E5%81%A5%E5%BA%B7%E5%A4%87%E5%BF%98.html</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Java SE 备忘]]></title>
    <url>%2F2017%2F11%2F29%2FJava_SE_memo.html</url>
    <content type="text"><![CDATA[搭建 Java 开发环境 下载JDK 下载 IDE:IntelliJ IDEA 配置JDK 删除在Path中的C:\ProgramData\Oracle\Java\javapath 新建系统变量：JAVA_HOME: C:\Program Files\Java\jdk-9.0.1 Path中添加纪录:%JAVA_HOME%\bin classpath需要时手动添加, 早版本可能需要配置这个,后来会自动在当前文件夹搜索,无需添加 JAVA 基础语法 基础类型，常量变量 整型：byte,short,int,long 所占1248个字节, 1个字节有8位。 对应空间2的n次方个数据，其中一半，即2的n-1次方，用来表示负数的话，另一半表示0和正数（如byte，一个字节8位，一共表示256个数据，从-128~127） 根据上述方法，各类型范围正数最大，128，32767（3万），2147483648（21亿）， 整数默认为int类型 long类型要带L后缀（这种语法他就是这么实现的，其实完全可以实现为不需要带L也不报错，避免错误那就都带上符号） 浮点型：float,double 4,8个字节 浮点数默认为double float类型要强加F后缀（这里也不需要注意F和f，既然都可以，f又没什么作用，那就加F大写更突出好了) ^_^ 字符型：char 2个字节 （Unicode） 布尔型：boolean 1个字节 变量注意 使用前必须赋值 作用域内有用 不能重复定义相同变量，嵌套作用域则会覆盖，如无必要不要定义重复定义相同名。 类型转换 类型转换这个在C++中各种类型之间的转换复杂晦涩难懂，其实在Java里也一样，实现肯定也复杂晦涩，但是用的时候只取需要的用法，这样就能相对于需要的场景简单了，而它本身并不简单。 值域小转大，自动转换为更大的，double d = 1000; 值域大转小，int i=(int)3.14;要加括号强制类型 运算符 前置++，–，先加后返回++后的值 后置++，–，先复制再加返回原对象的复制品，所以值也是原先的值，但自己的值在执行完已经完成了自加， 尽量不要写复杂的嵌套，在同一句中对同一变量前后左右的的自加自减，想干嘛？分开语句明确写明白想要什么效果，避免因为运算、结合的优先级，各种运算的副作用，时效性导致意外的结果。本来实现也是因平台编译器决定的。不要触碰这些灰色地带，写简单傻瓜的表达方式，除非复杂难懂的表达式它能明确带来什么好处。 引用类型：Scanner 123456789101112131415import java.util.Scanner;public class ScannerDemo &#123; Scanner sc = new Scanner(System.in); //创建一个扫描器，制定输入流为System.in System.out.println("输入一个数字")； int n = sc.nextInt(); System.out.println("n的值为"+n); System.out.println("输入一个字符串")； int str = sc.next(); System.out.println("str的值为"+str);&#125;注意：上述代码有很多IDE自动生成，需要相应快捷键，也就是说不是每个字需要自己手打才叫自己动手，不然自己造个电脑，自己造个锤子，自己建个发电厂再写代码啊，用快捷键借助IDE的便捷性使得程序员可以节省一些不变的繁琐的操作。sout快捷键对应输出语句新建Scanner时，IDE会自动提示导入某个包。。。。等等，学习中 Random 1234567891011import java.util.Random;public class RandomDemo&#123; public static void main(String][] args) &#123; Random r = new Random(); //创建一个随机器 int i = r.nextInt(100); //0到100的随机整数 double d = r.nextDouble(); &#125;&#125; Break continue 12345678hello:for (int i=1;i&lt;100;i++)&#123; for (int i=1;i&lt;100;i++) &#123; if(i&gt;3)&#123; break hello; &#125; &#125;&#125; switch 从某个条件进去后顺序执行直到break或default 数组 123456789101112131415161718192021//动态初始化，自动赋初值，一般为0，null等。boolean 默认初始化值为falseint[] x = new int[100];//静态初始化，手动赋值int[] x = &#123;1,2,3,4&#125;;遍历：for(int =0;i&lt;x.length;i++)&#123; System.out.println(x[i]);&#125;数组越界:x[n]从[0]到[n-1]数组空指针一场：x=null后再使用时会出错。二维数组：//动态初始化赋初值int[][] x = new int[3][4];//第二维的元素内容长度不定，未初始化初值。int[][] x = new int[3][];//手动静态：int[][] x = &#123;&#123;1,2&#125;,&#123;3,4,5,6&#125;,&#123;7,8,9&#125;&#125;;向上面的内容，我纯粹好奇试了以下是不是初始化了赋值，如果没有必要不用再试，一个语言提供的特性是无数的人的智慧结晶，一个人的一生都无法试完，只做需要的必要的部分。当然要辩证的看，就是你好奇心所到的地方可能在日后不定的对自己有帮助，所以有时间研究当然研究这些好奇的东西啊。 方法 一开始我老是记不住Java main方法的之前那一堆东西，感觉繁琐，是相较于c语言的int main(){}来说的。 public static void main(String[] args): 后来发现无非是前面加了限定符 , 公共权限，静态 然后传参为字符数组，也就是运行java时候给的参数列表。 返回值和参数都不是必须的 方法的重载 有且仅有参数类型、个数有逐一对应有变化就是方法重载； 权限限定符、返回值类型的修改是重复定义一个函数，是错误。 public void test(int x)和public void test(int y)，仅仅参数标识符不同，是错误 基本类型的参数在栈中，而引用类型在堆上，引用类型的指针在栈中， 所以传参时基本类型原先的不改变，传引用会改变堆上的引用数据。 String比较特殊，String类型表现出和基本类型相同的行为。 类 123456public class Demo&#123;&#125;Demo d = new Demo();此处为指针，类的属性的初始化在堆内存上。 Array List 123456789101112import java.util.ArrayList;ArrayList&lt;String&gt; list = new ArrayList&lt;String&gt;();list.add(Object obj);list.get(int index);list.size();list.add(int index, Object obj);list.set(int index, Object obj);list.remove(int index);list.clear;//尖括号指定类型，必须是引用类型//byte对应的引用类型Byte，short-&gt;Short, int -&gt; Interger, 等，基本上为大写全拼。 Java 面向对象 面向过程，面向对象 做什么，由谁来做什么 封装，继承，多态。 封装 复用代码 隐藏细节，暴露必要接口 继承 可维护性 复用代码 产生父子关系，多态的前提 弊端：耦合度高 最高父类Object类。 继承 单继承，多接口， 多层继承和多类继承一个类是允许的 子类不能访问父类私有变量 同名变量，调用父类用super 同名变量重写,只调用子类 重写时访问权限不能更小，其他权限，参数，返回类型都要一样1class Aa extends A&#123;&#125; 局部变量，成员变量 方法下的为局部，类下的为成员变量 局部保存在栈中，类中的变量保存在堆中 生命周期，方法结束，类对象消失 局部无初始默认值，堆中的成员变量有初始值 x表示局部的时候，this.x表示成员变量 传值，传引用 方法入栈执行，调用其它方法时，其他方法压栈，方法结束出栈，所以方法之间的传值是直接在栈中赋值 同样如果传值为对象的引用类型，那么是将堆内存地址传给其他方法，操作后值会在堆上改变。 成员变量的private public private避免在类外直接访问，需要时用Set，Get 内存对象创建，使用 main()方法压栈 新建对象时，堆内存开辟空间，分配地址，成员变量默认初始化，将地址保存在栈中的对象名中； 对象的方法调用时，压栈，如果是传值，那么在栈中的值传给栈中的这个对象方法，执行完，出栈。 抽象类 方法功能生命相同，具体内容不同，可以抽取方法声明，是抽象方法。 abstract修饰抽象方法和抽象类 抽象类无法创建对象，调用抽象方法没意义 覆盖了所有的抽象方法的子类才可以创建对象，否则还是一个抽象类。 abstract 无法和private共存，private无法被继承，也就无法被实现 无法和final 无法和static123456//抽象方法public abstract void hi();//抽象类abstract class &#123;&#125; 抽象类可以没有抽象方法，作用不让别人直接创建该类。 接口 被实现，可以多重实现接口。类之间对应继承A是B，对象和功能之间对应拥有A有B的功能。是仅对一系列方法的服用。 接口的变量必须是public static final,公共，一次初始化，不被改变。 接口的方法必须是public abstract 抽象方法 子类必须实现所有抽象方法才可以创建对象，否则还是一个抽象类12345678//多实现接口class Zi extends Fu implements SayHi,SaySorry&#123;&#125;//接口之间的多继承interface SayHi extends Say,Wave &#123;&#125; 抽象类与接口 相同： 继承顶端，被继承或实现 不能直接实例化 包含抽象方法，子类必须全部覆盖 不同： 抽象类部分方法提供子类不同实现，接口只包含抽象方法， 只能继承一个类（包括抽象类），而接口为了弥补单继承提供了对方法的服用。 抽象类是某个类的共性抽象，is a的关系 接口是某个功能的集合，like a的关系 多用接口，只有为所有子类都有的不同实现的功能才用抽象方法 多态 继承的时候，如一只狗阿黄既可以初始化另一只狗老黄，也可以初始化另一个动物老老黄。因为狗本来也是动物啊。 多态体现为，子类不仅可以初始化子类，也可以初始化父类，因为子类既是子类也是父类。]]></content>
  </entry>
  <entry>
    <title><![CDATA[面试注意事项]]></title>
    <url>%2F2017%2F11%2F29%2F%E9%9D%A2%E8%AF%95%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</url>
    <content type="text"><![CDATA[简历格式 标题、简历附件标题： 姓名-学历-求职意向 格式 一般为.pdf 无错别字 优势突出、贡献数据化 避免无关信息 诸如会ppt, excel, word操作等 面试 自我介绍 自己的优势！成绩？项目？大奖？捡最重要的说。 真诚，不说假话。但不主动说短处，除非被问到跟工作有关的需要坦诚。 技术提问 纸上写代码 有什么想问主考官？ 关于公司发展.]]></content>
  </entry>
  <entry>
    <title><![CDATA[随想]]></title>
    <url>%2F2017%2F11%2F29%2F%E9%9A%8F%E6%83%B3.html</url>
    <content type="text"><![CDATA[尊重事实 事实是什么？事实不是自己臆想的、不是自己愿意相信的、也不是别人故意表现出来让你相信的、更不是有人拿着国家人道主义道德政策让你以为的。 反例有： 自己赌博时渴望着赢，而事实上客人输才是赌场能够经营下去的原因。这里的输指的是金钱的减少，而不是某一场你赢的概率是50%，即便你赢了，你也没有获得50%的可能的收益，因为赌场有抽水。而更多数情况下，由于信息不全、情绪化、思考的模型不够贴合导致赢的概率都在50%以下。而有的人愈发强烈的必胜心，会忽略输的一面，只看赢的一面。轻则输钱难受，重则倾家荡产不能接受现实了结此生。 吵架的时候人总愿意相信自己是对的，别人都是错的，要认识到人产生这种看似是偏见到底是客观的，还是人本身的自我保护还是什么？ 纳粹德国在向民众煽动时，将邪恶的战争描述成国家立国之本，民族自强的必经之路，国家机器极其具有煽动性的灌输偏离客观的爱国情怀，那么真实的事实是这样嘛？ 传销描述着不需要创造价值的精神胜利法躺着就能赚钱，是客观事实嘛？ 入门的时候读进阶的书籍，这叫好高骛远。 该进阶的时候读入门的书籍，这叫沉溺在舒适区，停滞不前。 妄自菲薄。忽略了信心的客观作用。 盲目自大妄图一步登天。忽略了客观规律的作用。 事实是复杂的，没有人能掌握全部的事实，看到的不是全部的事实，据此推测的自己联想的也不是事实。道听途说的就更难以判断是不是事实。 事实是复杂的，有些难以描述，但难以描述不意味着经历过思考过和没经历没思考过一样。事实的复杂，以至于冗余繁杂的对一个规律的描述只求对其精确的刻画、贴近真理。初学需要这种冗余，因为简洁全面意味着高抽象，枯燥，难以理解。这就要求通过不断的例子多角度哪怕重复冗余也要加强从基础水平到简介全面的公式的过渡。而这种过渡又是因人而异的，有的人训练的很少就可以融会贯通，有些人训练的多。究其本身，除去语言的歧义性、多变性还有事物固有的复杂度，每个人的掌握背景也不同，所以因材施教，对待自己的特质要有针对性的，可能是冏与常人的方法来对待。总结就是实践是检验真理的唯一标准。所有的理论，方法，都是来源于实践对规律的发现，从已知的实践中总结，而最终服务于实践。这种实践可能时间跨度会很长，不能立即见效，但最终还是要实践来检验。 因材施教，发展才是硬道理。结合各方的说法，想要自身实践时，普遍的规律在适用个体的时候会有所出入，所以不能迷信某些教条，除非确实对自己有帮助 性子是环境故意对自己造成的还是自我放纵，是有人设计好的让他人自爆影响个人生产力、幸福感、健康还是给自己带来了什么好处？ 事实到底是什么 根据已知的事实说明的一些规律和道理，他们针对的具体场景是什么？ Love is wise, hatred is foolish. 爱是智慧的，恨是愚蠢的。 Cost and Benefit 有特定的收益，就会有所代价。 例如：具体用哪些算法，要分析特定的问题，特定的需求，需求比如：时间上更快，还是空间更小，还是解决的数据是大量小段数据，还是少量大段数据，都会有特定的解决方案，每种方案侧重不同，收益和代价也不同。 现在相比历史过去是信息获得，进化最唾手可得的时代，它不是最好，所以它还将进化，但它是对当下的我们最好的时代，很多信息都可以方便的利用前人们智慧的结晶进行当下数据的方便整合，开放，互联，别辜负了它。 任务、场景、特质。 明确任务、目标是什么。 世界在发展，问题的特定背景在变化，抓住场景紧要的是什么，和过去解决类似问题的经验有什么区别，防止过去的知识在解决新问题时造成生搬硬套的问题。这意味着，所有的经验只是借鉴，而无绝对适用之说。 明确了目标，认清了应用场景，还要立足于真实世界中自身的特质，这个特质包括了开始的水平，优劣势，能达到的高度等 现实是复杂的，尊重事实而不是愤慨激昂的相信大脑的感觉。 自己容易对反对自己的观点作斗争，只要是客观的，可以反对。 个例与整体水平，随着认识的数据越多，所得到的规律就越接近真实，个例的存在要重视，整体的数据统计也要重视。个例的存在是提醒自己有这种可能，如各种危险行为，不健康的生活习惯等。整体的数据统计是提醒自己，整体的水平、规律是怎样的。 个人的核心价值在于对世界的贡献 这种贡献不应该能被机器、某个自动的流程、以及大部分人所能替代。 如果自己的能力是机器能够替代的，那么机器高速在发展，物理设备在急速廉价的过程也就是自己价值在变链家的过程。 这种能力和做出的贡献也不应该是别人所能轻易替代的，所以自己在大量的专业领域中要找到对世界贡献更多的领域，然后做难以或者不能被替代的贡献。 反例有： 手动更改代码以求格式美观 不如 自动格式化代码高效准确 自己开发一套操作系统 不如 现在究竟考验、广泛使用、大量人员测试维护的系统的实用价值高 自己手动洗衣服 不如 洗衣机省时省力 等 以上反例只针对特定目的，比如价值，但对自身的价值来说，自己开发的操作系统是不如已经成熟的，但自己通过倒腾能学到东西，也是一种价值。 术业有专攻 世界很大，领域很多，每个人有不同的环境，有其发展的特定领域，在特定领域又有特定领域。 基于这样一个客观事实，我们就可以坦然接受很多领域不如别人的事实，即使是专业领域，也有所侧重，而不是作为专家的时候不能 完美 完美不存在。 追求完美是积极的心态。 害怕失败、害怕出错、害怕不完美只会束缚自己，失去一次次的机会，停滞不前。 错误更能让人找出需要改进的地方，失败是失败，但不是完结，除非你无所反思无所动作，否则失败也是有利有弊。 公司与员工的关系 互利共赢，缺一不可。 明确任务，积极沟通，及时反馈。 任务不明确那么可以浪费时间的事情就太多了。 沟通不到位，轻则影响团队效率，重则毁掉团队成果。 进度要及时反馈，让自己和需要知道的人早作准备。 拥抱变化，终身学习，与时俱进，迭代更新。 如果不是必需的话，可以放下偏见，看看另外的路是什么样的，是不是你想的那样、听到的那样。 有很多道理老生常谈，在阅读的时候经常不注重，就当作官话跳过去了，不是只有新的事物、闻所未闻的才是瑰宝，只要它是有道理的，就不管它是谁说出来的，也不管多么老套，情理上那么不能接受，事实就是事实，规律就是规律，顶多，它只是个令人讨厌的道理。 放下自己无所谓的骄傲和固执（你可能认为是尊严的固执）、尊严是尊严，道理是道理，自己是会做错事情，自己会有自己不擅长的领域，自己擅长的领域也会有不如人的地方，想要成长就不能偏执。毕竟，这不可耻，这和尊严无关。 流水不腐：场景的变化带来需求的变化。 如面向机器效率的比重逐渐降低，面向快速迭代生产研发比重增高。 各种编程语言的新生，衰落，标准的更新，为了适应更新的需求。 Java 从面向改变什么值，逐渐向面向函数式编程。 胡思乱想 真实记录下原始数据，如果需要，进行计算，或者其他形式的生成，不做删除。 时间精力有限，需要才研究。 风格可根据需求进行工具统一格式化。 尽可能的不依赖工具，聚焦自我，不要浪费时间精力挑选工具。 与时俱进，实时反馈，不要沉浸在老旧过时的标准中掌握奇技淫巧。 • 需求优先级，分毫必争与抓住主要问题，风险与回报，不轻言放弃，不盲目坚持。 ○ 抽象，封装，分等级，分模块。都是有这个需要，按需来的,功能抽象成什么程度，保留哪些可变，都时按需来。需要GUI供操作人员简单使用则写出常用的功能供给使用者来使用，更复杂的功能必须要是提供参数调整的接口，或是GUI，或是命令。 ○ 谜团卖点金买了BKB终于守住高地，又是一波更新了华丽的不是至关重要的小装备而没有留买活一时疏忽被杀后被破了2路。时刻关注当下目标，到底是更肥看起来更具成长性好还是紧紧盯住胜利先过了当下，正如做笔记不是为了做笔记而是要学会东西一样，方式不应该作为一个不可放弃的东西，除非它变成了一个所需要的。如现在我需要提醒自己这发生的事以作日后参考。而这个的重要性，这个的需要到底什么程度，当然没有到不可或缺的程度，只是能想象到的一种需要，未经检验。而追求事物的华丽性应当是人生的一种追求，在以保证目标的前提下的追求，即活下来，再活的好。当然那波失误也很重要，主要在于买了宝石没有给队友协商好，我的沟通发出去而队友没理我，我应该坚持等他带上宝石或者我扔掉不太重要的装备而拿到宝石，也比冒着风险推炸弹人的塔强。所以做事要考虑风险，尽量考虑，当然有时候只能孤注一掷，还是要在可接受的范围内，比如输了怎么办，比如为什么不能等一下鸟，等到队友回答，等到队友拿到宝石，失之毫厘谬以千里。优势容易得意忘形，功亏一篑，同样在劣势的时候要紧盯住对方失误，不言放弃，只要继续下去，事实是输的概率会大，但还是有赢的机会，而放弃了，就是输了。 • 小马过河分辨出真正需要的以及背后的意图 ○ 没有完美的人，面对权威要有所思考，先模仿，理解先驱们良好的研究成果，在某一方面从活下来（必要），再到活的好。与此同时保留必要时刻（最低限度，当然没事你也可以优化，审视，反思，但值得嘛？人生是有限的精力，而人类发展过程中前赴后继的人才研究出的东西你能面面俱到的提出有效的建议？）的思考。 ○ 进入某一行业问老人，他们喜欢吹嘘多难可能，注意是可能，当年付出多少汗水，以此显得当今的成果是理所当然和自身的优越。还有种可能确实很难。自己对一个东西的期待太简单才会觉得难。 • 关于学习，抄袭，借鉴 ○ 所有案例只可借鉴而不可绝对复制，因人而异。 ○ 借鉴能找到的最优秀的资源，环境，人，思考他们的最佳实践，不断逼近，反思。 • 为了想要的明天，根据需要： ○ 能达到的不可替代性，努力成为做出大部分贡献的那一小部分人 ○ 重新造轮子，或者不造轮子。 ○ 长线大鱼，还是现在吃饱 ○ 直接和及时的反馈 ○ 看清自己是现在解决还是以后解决遇到的问题 ○ 按部就班还是跳跃重点 ○ 完善到什么程度，因为寻找完美的方案是一种拖延。 ○ 选择工具，语言，了解细节，而不是标榜会什么，掌握了什么细节。 ○ 说服了别人，掌握了东西，都不能让你骄傲，是个人花了时间就能学会一些东西。真正让我骄傲的应该是自己的成长，对家人负责的能力，反馈朋友，环境，社会，国家，自然，以及在此之上个人理想。 ○ 我有心爱的人，我做过很多错事，我要珍惜当下的生活。令行禁止，约束自己就是在迎接未来的洗礼。我不会昏昏沉沉最终连爱人的能力都没有。 • 及时反馈： ○ logo和反馈链接是必要的，建立在双向可沟通的基础之上。 ○ 哪里不会，如何解决。 ○ 保持和矛盾方的沟通，除非结束游戏。 • 恶习： ○ 熬夜，放纵。讨厌强迫，害怕失败，寻找完美。 § 培养对自己更好的习惯，习惯的环境，调整身体状态进入专注，一次只做一件事，别人强迫不爽是拖延，害怕失败是拖延，寻找完美是拖延。如果是该做的那么就去做。 § 人本身大脑需要的营养，休息。身体的节律，呼吸，进食，规律趋于常态会更加稳定。故作息要稳定放纵跟偶尔的小变化不同，量的不同。 • 实践是检验真理的唯一标准，一切都是为了能够到来的明天，而不是意淫的完美世界。• 可操作： ○ 事实：认识自己：专注时间，记忆力，推理能力，拖延 ○ 计划 ○ 记录 ○ 可视化 ○ 总结 • 做和休息 ○ 多种角色暗示自己进行不同的做事，休息，运动等，身体各部分之间要轮流休息。如学习一直在动脑，感到疲倦了再去洗洗衣服什么的。 ○ 确保休息的时候全身心在休息。 § 冥想，愉快的场景，身体的排泄和活动，血液循环。 、 • 排列需求的优先级，而后选择。利用其优点，也要承担其不缺点。 ○ 如编程语言在不同领域中的选择，侧重点如高效率，安全，开发周期短等中的某些选项，在其他方面就要妥协。C/C++偏向于注重效率的图像，底层构件，同时要付出开发周期相对缓慢的代价。 ○ 如不同编码风格之间的选择。可能要考虑公司的编码规范，历史习惯。 ○ 如算法中空间和时间代价的平衡，虽然每年都有新的算法更胜一筹，但排除面面俱到的提升，大部分都是根据需求调整舍弃和要得到的。动态联系问题，回顾反思，避免盲目从众，墨守成规、戾气十足，钻牛角尖，以当下需求为导向，需要思考，需要变化，需要稳定，需要易读性，需要跟随事物新发展新动态，那就去做。]]></content>
  </entry>
  <entry>
    <title><![CDATA[勤学不辍]]></title>
    <url>%2F2017%2F11%2F04%2F%E5%8B%A4%E5%AD%A6%E4%B8%8D%E8%BE%8D.html</url>
    <content type="text"><![CDATA[勤学不是不经思考不选方向不用方法的死学，而是终身学习的意识。 利用碎片时间有时间就想一想： 三省吾身 为人谋不忠？朋友交不信？传不习？ 展望未来 结合自身和环境趋势 闭目养神 起码不会浪费精力在无聊的事情上 3BBus交通时间 忌东张西望，胡思乱想，属羊无聊。 宜 看书听书 能看书就带本书，太吵就看电子书，太挤听书听讲座，听政治，金融，健康，科技新闻。 Bed睡前时间 忌 失眠 白天过的太安逸？ 别强迫自己睡，就别想事情，脑子想着眼前看到的黑色（闭着眼什么都看不到），放空自己。 也可以耗费精力干点别的，累了就睡了，但第二天一定要按时起。 压力过大，悟已往之不谏，知来者之可追，科学可持续的走好以后的生活，急是没用的 睡太晚 如非必须，熬夜会耗费第二天的精力，值得嘛? Bath洗澡时间 个人来讲，我洗澡很享受，唱唱歌，想想游戏挺好的。没必要用洗澡的时间学习，而且人是活的，不能像机器一样得着空就学习，我需要这种休息。 但是适合你吗？就像上面的几个零碎时间哪些是不适合你的。 归根到底一个指导方法只是一种建议，针对到个人就要看合适不合适，合适就继续保持，不合适没有成效就放弃，不能死板照抄，要领会利用碎片时间学习的思想，心中要有学习的意识，而不是什么都要尽信书，发展才是硬道理。所以我要去试试洗澡的学习了（逃 锁定目标明确 Specific可量化 Measurable切实可行 Achievable注重结果的 Result-oriented时间限制 Time-limited不要妄自菲薄出生是随机的，上天给自己的肢体健全或是残缺，家庭美满或是破裂，容貌美或丑，都是随机的，幸运和不幸的先天条件只能接受，但认为自己不行就是妄自菲薄了，艰苦环境中放任自流的不被世界记住的人有很多，但也有被世界记住的各种名人。含着金汤匙出生的，有谨慎克制，充分发挥自己条件更上一层楼的，也有因为出身就以此为荣败光家底的。他们怎样都是天的安排，只要是积极面对对自己和周围有着积极影响的，人们都会给予尊重，而生活也会给自己汇报。而自己，不要限制自己，为了自己喜欢的，为什么不能去必要的尝试？为什么就非要认为自己是最无能的一个，这样就可以心安理得的什么都不做了嘛？ 心态 客观条件+自己主动。 其实很多基础有用的理论或者指导方法都写在了从小以来的课本里了，一个国家花费总GDP的高百分比投放在教育上的各种投入、补贴不是没有原因的，虽然有蛀虫吃掉了部分、不妨碍大部分的投入。只不过小时候我们还不懂，只是想逃避痛苦的、无聊的知识和作业。回头看看数学教我们逻辑思维，语文教我们如何与人沟通表达，英语教会我们如何才能借鉴最先进国家美国的技术。他们都是有用的，而只有自己也认识到这种重要性，自己想学才会学的更顺利，被动的灌输不仅容易遗忘，而且处处找到机会我们就会抗拒，置之不理。所以要有对学习的强烈意识，学习是为了保持自身在人才济济的泱泱大国中的核心竞争力，自己不会不学不练，随便找个人都比自己强，那自己 不要妄自菲薄，不骄傲自满 心态 客观条件+自己主动。好心态 勤奋清晰的目标坚持合理安排创造性精力集中正直乐观愿意与他人合作接受他人合理建议乐观向上，坚守道德，诚信可靠，换位思考，有建设性正确认识自己融入团队的速度适应岗位的速度听从指挥，按时保质保量完成任务，不找借口，改正错误和客户良好的沟通，与团队协调发展摆脱消极心态 过去已成事实，如果不在未来做出改变那么悔恨只是浪费时间。还能改变的就是现在和未来。给遇见的所有人打个招呼吧多笑一笑见到别人的优点多赞美能力，心态交织 人财能力高，心态好创造的价值不仅高于需支付的薪水，而且是竞争中最实惠的的，所以要么你要价低，要么能力高。人才能力差，心态好能力不好可以培养人材能力强，心态差没有职业素养，容易出卖公司机密，但技术好，确实需要你的技术就会考虑。人裁无能力，无心态懒惰，不自信，借口 某些时期，懒惰了你可能还会有其他机会，但再也没现在这个机会了。怎么自信，在初中课本里都写到了，你不断的积累小的成功，不断学到骄傲的小本领，才会自信起来。no excuse没有任何借口沟通 设定的目标信息，思想，情感传递有个结果实时反馈 每天需要时，反馈进度，需要什么帮助，已经完成什么，有什么结果。收到短信，通知，要进行回复，以表示收到确认，有原因不能做到要进行解释。诚信礼貌，友善。 吵架，发脾气容易使沟通终止。 正确的态度 不骄傲，不懦弱，不卑不亢。 礼仪 你希望别人怎么对你，你就怎么对别人。 别人希望你怎么对待他们，你就怎么对待他们。 电话铃声响几声接公务乘车哪个是上座两套西服藏蓝色，深灰色，浅灰色，单排扣条纹间距：针点式条纹或者没有条纹肩膀遮住臀部衬衫干净平整浅色系纯棉加厚袖长领高两指领带高品质面料，图案含蓄，深蓝绛红保底，禁黑色，团复杂，破损，领带夹西装，衬衫，领带配色渐变色对比色红色可信黑色权力粉色潮流黄色随和公务配饰三一定律皮鞋，皮带，皮包颜色统一袜子颜色一致商务外套深色系，米色直线型，A字形不要垫肩不扣扣子穿之前把袖子上的商标减掉。。。西装最下面的扣子不扣领带不能露出来休闲西装与正装西装发型问题清洁，染发，奇异发型，第一印象很重要，自信，微笑。倾听 不要盲目打断。微笑，传递真诚的笑意，传递积极的感染力。耳朵听，眼睛看，脑子想。给予肯定 握手礼仪 握手顺序：尊者为先握手的力度：合适握手时间：合适握手禁忌：戴帽子，墨镜，手插兜，不尊敬目光注视名片礼仪 接名片：双手接点头致谢看内容收起来禁忌：玩弄名片随便折，放在一边名片上写字递交名片：双手呈递文字正向对方，让对面不用翻就可以看。电话礼仪 工作时间非重大事情不接私人电话。尊者先挂电话。介绍他人 把职位低的介绍给尊者（上级，长辈，客户，外籍，女士）切勿手指，用掌心朝上介绍某人。真诚。汽车作为 司机旁边是上座司机后面时vip上座，后座右边是公务接待上座。开会 面门微商，以右为上，离远为上。接电话 三声接晚了，说声 抱歉让您久等了。准备好纸笔做记录接电话，您好，这里是xx。进行确认。结束语。请放心，谢谢。仪态注意 动作迟缓，目光游移，弯腰驼背，神情不安，漫不经心，邋遢凌乱，趾高气昂，拘谨严肃。双手抱胸。]]></content>
      <tags>
        <tag>learn</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Avatar by GIMP]]></title>
    <url>%2F2017%2F11%2F04%2Favatar_by_GIMP.html</url>
    <content type="text"><![CDATA[How did I draw avatar by GIMP 2 Pick favorite prototype image Choose one topic for me: I like wind. Aquarius. I enjoy the time when fire burning during my childhood. Also I cherish the memory of cuckoo’s singing. … Search Cuckoo simple to browse picture and download which interests me most as the prototype.(Then my body was full of power.) Try different combination of every characters in “FireCuckoo” to replace the lines in prototype image. Dawn on papers, it’s interesting. Draw FireCuckoo by GIMP GIMP is an open-source, cross-platform and powerful GNU Image Manipulation Program. Search “GIMP”, install, and open it. File, New, width:1024, Height:1024, OK. File, Open as layers...,choose the prototype image. Ctrl L to open Layers Brushes, Ctrl B to open Toolbox, Tab key for open/Close them. Right Click prototype.jpg, new layer, OK. Find A icon in Toolbox, Set text size:256,color red. Input “F”. Hit ESC: Back to select mode. Shift R: rotate “F”, Up &amp; Down key is available. Shift T: move, scale “F”. Enter: confirm modification. Put “F” to the appropriate location where it can fit partial lines of prototype image. Do Step 7 to 10 for every character in “FireCuckoo”, notice that drag per-character layer on the front of prototype and background. Adjust more to make it look better. Layer, prototype image layer, Right Click, Delete Layer. Layer: Right Click. Merge all layers down into Background. File, Export.]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo on GitHub]]></title>
    <url>%2F2017%2F11%2F03%2Fhexo_on_GitHub.html</url>
    <content type="text"><![CDATA[Preparation GitHub: Register New repo: FireCuckoo.github.io Install Git,Node.js Open Git Bash by Run as administrator Init GitHub via Git Bash12345678cd c:cd Users/FireCuckoomkdir MyGitcd Mygitgit initgit config --global user.name &quot;FireCuckoo&quot;git config --global user.email &quot;FireCuckoo@gmail.com&quot;ssh-keygen -t rsa -C &quot;FireCuckoo@gmail.com&quot; Deploy key from C:\Users\FireCuckoo\.ssh\id_rsa.pub to GitHub’s FireCuckoo.github.io Settings for hexoInit hexo via Git Bash1234567cd /c/Users/FireCuckoo/mkdir hexocd hexonpm install hexo-cli -ghexo inithexo ghexo s open URL: http://localhost:4000 Connect to GitHub open ~/hexo/_config.yml Ctrl F Search “deploy” 1234deploy: type: git repository: git@github.com:FireCuckoo/FireCuckoo.github.io.git branch: master Git bash: 12npm install hexo-deployer-git --savehexo d Make it looks better visit http://theme-next.iissnan.com/ to use next theme more features; Use Search Engine, key word “hexo 美化”. Connect GitHub to your domain nameLocal Settings New file change directory to ~/hexo/source new a file named CNAME, write in FireCuckoo.com, save. Git Bash open Git Bash ping FireCuckoo.github.io copy the ip address DNS Settings Go your domain name service: add record 12CNAME WWW FireCuckoo.github.ioA @ 151.101.197.147 First Post Git Bash: hexo new &quot;Hexo on GitHub&quot; File Explorer: ~/hexo/source/_posts change the content of &quot;Hexo on GitHub&quot; save. Git Bash: 123hexo cleanhexo ghexo d Browser: http://www.FireCuckoo.com ALL DONE]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
</search>
